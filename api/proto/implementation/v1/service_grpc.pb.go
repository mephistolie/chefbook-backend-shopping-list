// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShoppingListService_GetShoppingList_FullMethodName   = "/v1.ShoppingListService/GetShoppingList"
	ShoppingListService_SetShoppingList_FullMethodName   = "/v1.ShoppingListService/SetShoppingList"
	ShoppingListService_AddToShoppingList_FullMethodName = "/v1.ShoppingListService/AddToShoppingList"
)

// ShoppingListServiceClient is the client API for ShoppingListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingListServiceClient interface {
	GetShoppingList(ctx context.Context, in *GetShoppingListRequest, opts ...grpc.CallOption) (*GetShoppingListResponse, error)
	SetShoppingList(ctx context.Context, in *SetShoppingListRequest, opts ...grpc.CallOption) (*SetShoppingListResponse, error)
	AddToShoppingList(ctx context.Context, in *AddToShoppingListRequest, opts ...grpc.CallOption) (*AddToShoppingListResponse, error)
}

type shoppingListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingListServiceClient(cc grpc.ClientConnInterface) ShoppingListServiceClient {
	return &shoppingListServiceClient{cc}
}

func (c *shoppingListServiceClient) GetShoppingList(ctx context.Context, in *GetShoppingListRequest, opts ...grpc.CallOption) (*GetShoppingListResponse, error) {
	out := new(GetShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetShoppingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) SetShoppingList(ctx context.Context, in *SetShoppingListRequest, opts ...grpc.CallOption) (*SetShoppingListResponse, error) {
	out := new(SetShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_SetShoppingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) AddToShoppingList(ctx context.Context, in *AddToShoppingListRequest, opts ...grpc.CallOption) (*AddToShoppingListResponse, error) {
	out := new(AddToShoppingListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_AddToShoppingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingListServiceServer is the server API for ShoppingListService service.
// All implementations must embed UnimplementedShoppingListServiceServer
// for forward compatibility
type ShoppingListServiceServer interface {
	GetShoppingList(context.Context, *GetShoppingListRequest) (*GetShoppingListResponse, error)
	SetShoppingList(context.Context, *SetShoppingListRequest) (*SetShoppingListResponse, error)
	AddToShoppingList(context.Context, *AddToShoppingListRequest) (*AddToShoppingListResponse, error)
	mustEmbedUnimplementedShoppingListServiceServer()
}

// UnimplementedShoppingListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingListServiceServer struct {
}

func (UnimplementedShoppingListServiceServer) GetShoppingList(context.Context, *GetShoppingListRequest) (*GetShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) SetShoppingList(context.Context, *SetShoppingListRequest) (*SetShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) AddToShoppingList(context.Context, *AddToShoppingListRequest) (*AddToShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToShoppingList not implemented")
}
func (UnimplementedShoppingListServiceServer) mustEmbedUnimplementedShoppingListServiceServer() {}

// UnsafeShoppingListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingListServiceServer will
// result in compilation errors.
type UnsafeShoppingListServiceServer interface {
	mustEmbedUnimplementedShoppingListServiceServer()
}

func RegisterShoppingListServiceServer(s grpc.ServiceRegistrar, srv ShoppingListServiceServer) {
	s.RegisterService(&ShoppingListService_ServiceDesc, srv)
}

func _ShoppingListService_GetShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetShoppingList(ctx, req.(*GetShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_SetShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).SetShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_SetShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).SetShoppingList(ctx, req.(*SetShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_AddToShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).AddToShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_AddToShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).AddToShoppingList(ctx, req.(*AddToShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingListService_ServiceDesc is the grpc.ServiceDesc for ShoppingListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ShoppingListService",
	HandlerType: (*ShoppingListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShoppingList",
			Handler:    _ShoppingListService_GetShoppingList_Handler,
		},
		{
			MethodName: "SetShoppingList",
			Handler:    _ShoppingListService_SetShoppingList_Handler,
		},
		{
			MethodName: "AddToShoppingList",
			Handler:    _ShoppingListService_AddToShoppingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}
